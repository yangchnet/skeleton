// Code generated by entc, DO NOT EDIT.

package authzpolicy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PolicyName applies equality check predicate on the "policy_name" field. It's identical to PolicyNameEQ.
func PolicyName(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPolicyName), v))
	})
}

// Obj applies equality check predicate on the "obj" field. It's identical to ObjEQ.
func Obj(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObj), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// PolicyNameEQ applies the EQ predicate on the "policy_name" field.
func PolicyNameEQ(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPolicyName), v))
	})
}

// PolicyNameNEQ applies the NEQ predicate on the "policy_name" field.
func PolicyNameNEQ(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPolicyName), v))
	})
}

// PolicyNameIn applies the In predicate on the "policy_name" field.
func PolicyNameIn(vs ...string) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPolicyName), v...))
	})
}

// PolicyNameNotIn applies the NotIn predicate on the "policy_name" field.
func PolicyNameNotIn(vs ...string) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPolicyName), v...))
	})
}

// PolicyNameGT applies the GT predicate on the "policy_name" field.
func PolicyNameGT(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPolicyName), v))
	})
}

// PolicyNameGTE applies the GTE predicate on the "policy_name" field.
func PolicyNameGTE(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPolicyName), v))
	})
}

// PolicyNameLT applies the LT predicate on the "policy_name" field.
func PolicyNameLT(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPolicyName), v))
	})
}

// PolicyNameLTE applies the LTE predicate on the "policy_name" field.
func PolicyNameLTE(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPolicyName), v))
	})
}

// PolicyNameContains applies the Contains predicate on the "policy_name" field.
func PolicyNameContains(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPolicyName), v))
	})
}

// PolicyNameHasPrefix applies the HasPrefix predicate on the "policy_name" field.
func PolicyNameHasPrefix(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPolicyName), v))
	})
}

// PolicyNameHasSuffix applies the HasSuffix predicate on the "policy_name" field.
func PolicyNameHasSuffix(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPolicyName), v))
	})
}

// PolicyNameEqualFold applies the EqualFold predicate on the "policy_name" field.
func PolicyNameEqualFold(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPolicyName), v))
	})
}

// PolicyNameContainsFold applies the ContainsFold predicate on the "policy_name" field.
func PolicyNameContainsFold(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPolicyName), v))
	})
}

// ObjEQ applies the EQ predicate on the "obj" field.
func ObjEQ(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObj), v))
	})
}

// ObjNEQ applies the NEQ predicate on the "obj" field.
func ObjNEQ(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObj), v))
	})
}

// ObjIn applies the In predicate on the "obj" field.
func ObjIn(vs ...string) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldObj), v...))
	})
}

// ObjNotIn applies the NotIn predicate on the "obj" field.
func ObjNotIn(vs ...string) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldObj), v...))
	})
}

// ObjGT applies the GT predicate on the "obj" field.
func ObjGT(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObj), v))
	})
}

// ObjGTE applies the GTE predicate on the "obj" field.
func ObjGTE(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObj), v))
	})
}

// ObjLT applies the LT predicate on the "obj" field.
func ObjLT(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObj), v))
	})
}

// ObjLTE applies the LTE predicate on the "obj" field.
func ObjLTE(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObj), v))
	})
}

// ObjContains applies the Contains predicate on the "obj" field.
func ObjContains(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldObj), v))
	})
}

// ObjHasPrefix applies the HasPrefix predicate on the "obj" field.
func ObjHasPrefix(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldObj), v))
	})
}

// ObjHasSuffix applies the HasSuffix predicate on the "obj" field.
func ObjHasSuffix(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldObj), v))
	})
}

// ObjEqualFold applies the EqualFold predicate on the "obj" field.
func ObjEqualFold(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldObj), v))
	})
}

// ObjContainsFold applies the ContainsFold predicate on the "obj" field.
func ObjContainsFold(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldObj), v))
	})
}

// PolicyEQ applies the EQ predicate on the "policy" field.
func PolicyEQ(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPolicy), v))
	})
}

// PolicyNEQ applies the NEQ predicate on the "policy" field.
func PolicyNEQ(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPolicy), v))
	})
}

// PolicyIn applies the In predicate on the "policy" field.
func PolicyIn(vs ...string) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPolicy), v...))
	})
}

// PolicyNotIn applies the NotIn predicate on the "policy" field.
func PolicyNotIn(vs ...string) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPolicy), v...))
	})
}

// PolicyGT applies the GT predicate on the "policy" field.
func PolicyGT(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPolicy), v))
	})
}

// PolicyGTE applies the GTE predicate on the "policy" field.
func PolicyGTE(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPolicy), v))
	})
}

// PolicyLT applies the LT predicate on the "policy" field.
func PolicyLT(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPolicy), v))
	})
}

// PolicyLTE applies the LTE predicate on the "policy" field.
func PolicyLTE(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPolicy), v))
	})
}

// PolicyContains applies the Contains predicate on the "policy" field.
func PolicyContains(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPolicy), v))
	})
}

// PolicyHasPrefix applies the HasPrefix predicate on the "policy" field.
func PolicyHasPrefix(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPolicy), v))
	})
}

// PolicyHasSuffix applies the HasSuffix predicate on the "policy" field.
func PolicyHasSuffix(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPolicy), v))
	})
}

// PolicyIsNil applies the IsNil predicate on the "policy" field.
func PolicyIsNil() predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPolicy)))
	})
}

// PolicyNotNil applies the NotNil predicate on the "policy" field.
func PolicyNotNil() predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPolicy)))
	})
}

// PolicyEqualFold applies the EqualFold predicate on the "policy" field.
func PolicyEqualFold(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPolicy), v))
	})
}

// PolicyContainsFold applies the ContainsFold predicate on the "policy" field.
func PolicyContainsFold(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPolicy), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.AuthzPolicy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// HasCreateBy applies the HasEdge predicate on the "create_by" edge.
func HasCreateBy() predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreateByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreateByTable, CreateByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreateByWith applies the HasEdge predicate on the "create_by" edge with a given conditions (other predicates).
func HasCreateByWith(preds ...predicate.User) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreateByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreateByTable, CreateByColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthzPolicy) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthzPolicy) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthzPolicy) predicate.AuthzPolicy {
	return predicate.AuthzPolicy(func(s *sql.Selector) {
		p(s.Not())
	})
}
