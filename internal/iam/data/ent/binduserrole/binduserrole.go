// Code generated by entc, DO NOT EDIT.

package binduserrole

import (
	"time"
)

const (
	// Label holds the string label denoting the binduserrole type in the database.
	Label = "bind_user_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldRolename holds the string denoting the rolename field in the database.
	FieldRolename = "rolename"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// Table holds the table name of the binduserrole in the database.
	Table = "bind_user_roles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "bind_user_roles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_bindings"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "bind_user_roles"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "role_bindings"
)

// Columns holds all SQL columns for binduserrole fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldRolename,
	FieldCreateTime,
	FieldUpdateTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "bind_user_roles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"role_bindings",
	"user_bindings",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// RolenameValidator is a validator for the "rolename" field. It is called by the builders before save.
	RolenameValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)
