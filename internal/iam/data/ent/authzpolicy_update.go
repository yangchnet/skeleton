// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/authzpolicy"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/predicate"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/user"
)

// AuthzPolicyUpdate is the builder for updating AuthzPolicy entities.
type AuthzPolicyUpdate struct {
	config
	hooks    []Hook
	mutation *AuthzPolicyMutation
}

// Where appends a list predicates to the AuthzPolicyUpdate builder.
func (apu *AuthzPolicyUpdate) Where(ps ...predicate.AuthzPolicy) *AuthzPolicyUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetPolicyName sets the "policy_name" field.
func (apu *AuthzPolicyUpdate) SetPolicyName(s string) *AuthzPolicyUpdate {
	apu.mutation.SetPolicyName(s)
	return apu
}

// SetObj sets the "obj" field.
func (apu *AuthzPolicyUpdate) SetObj(s string) *AuthzPolicyUpdate {
	apu.mutation.SetObj(s)
	return apu
}

// SetPolicy sets the "policy" field.
func (apu *AuthzPolicyUpdate) SetPolicy(s string) *AuthzPolicyUpdate {
	apu.mutation.SetPolicy(s)
	return apu
}

// SetNillablePolicy sets the "policy" field if the given value is not nil.
func (apu *AuthzPolicyUpdate) SetNillablePolicy(s *string) *AuthzPolicyUpdate {
	if s != nil {
		apu.SetPolicy(*s)
	}
	return apu
}

// ClearPolicy clears the value of the "policy" field.
func (apu *AuthzPolicyUpdate) ClearPolicy() *AuthzPolicyUpdate {
	apu.mutation.ClearPolicy()
	return apu
}

// SetStatus sets the "status" field.
func (apu *AuthzPolicyUpdate) SetStatus(s string) *AuthzPolicyUpdate {
	apu.mutation.SetStatus(s)
	return apu
}

// SetUpdateTime sets the "update_time" field.
func (apu *AuthzPolicyUpdate) SetUpdateTime(t time.Time) *AuthzPolicyUpdate {
	apu.mutation.SetUpdateTime(t)
	return apu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (apu *AuthzPolicyUpdate) SetNillableUpdateTime(t *time.Time) *AuthzPolicyUpdate {
	if t != nil {
		apu.SetUpdateTime(*t)
	}
	return apu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (apu *AuthzPolicyUpdate) ClearUpdateTime() *AuthzPolicyUpdate {
	apu.mutation.ClearUpdateTime()
	return apu
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (apu *AuthzPolicyUpdate) SetCreateByID(id int) *AuthzPolicyUpdate {
	apu.mutation.SetCreateByID(id)
	return apu
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (apu *AuthzPolicyUpdate) SetNillableCreateByID(id *int) *AuthzPolicyUpdate {
	if id != nil {
		apu = apu.SetCreateByID(*id)
	}
	return apu
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (apu *AuthzPolicyUpdate) SetCreateBy(u *User) *AuthzPolicyUpdate {
	return apu.SetCreateByID(u.ID)
}

// Mutation returns the AuthzPolicyMutation object of the builder.
func (apu *AuthzPolicyUpdate) Mutation() *AuthzPolicyMutation {
	return apu.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (apu *AuthzPolicyUpdate) ClearCreateBy() *AuthzPolicyUpdate {
	apu.mutation.ClearCreateBy()
	return apu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AuthzPolicyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(apu.hooks) == 0 {
		if err = apu.check(); err != nil {
			return 0, err
		}
		affected, err = apu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthzPolicyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apu.check(); err != nil {
				return 0, err
			}
			apu.mutation = mutation
			affected, err = apu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apu.hooks) - 1; i >= 0; i-- {
			if apu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AuthzPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AuthzPolicyUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AuthzPolicyUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apu *AuthzPolicyUpdate) check() error {
	if v, ok := apu.mutation.PolicyName(); ok {
		if err := authzpolicy.PolicyNameValidator(v); err != nil {
			return &ValidationError{Name: "policy_name", err: fmt.Errorf(`ent: validator failed for field "AuthzPolicy.policy_name": %w`, err)}
		}
	}
	if v, ok := apu.mutation.Obj(); ok {
		if err := authzpolicy.ObjValidator(v); err != nil {
			return &ValidationError{Name: "obj", err: fmt.Errorf(`ent: validator failed for field "AuthzPolicy.obj": %w`, err)}
		}
	}
	if v, ok := apu.mutation.Status(); ok {
		if err := authzpolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AuthzPolicy.status": %w`, err)}
		}
	}
	return nil
}

func (apu *AuthzPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authzpolicy.Table,
			Columns: authzpolicy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authzpolicy.FieldID,
			},
		},
	}
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.PolicyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldPolicyName,
		})
	}
	if value, ok := apu.mutation.Obj(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldObj,
		})
	}
	if value, ok := apu.mutation.Policy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldPolicy,
		})
	}
	if apu.mutation.PolicyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: authzpolicy.FieldPolicy,
		})
	}
	if value, ok := apu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldStatus,
		})
	}
	if value, ok := apu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authzpolicy.FieldUpdateTime,
		})
	}
	if apu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: authzpolicy.FieldUpdateTime,
		})
	}
	if apu.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authzpolicy.CreateByTable,
			Columns: []string{authzpolicy.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authzpolicy.CreateByTable,
			Columns: []string{authzpolicy.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authzpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AuthzPolicyUpdateOne is the builder for updating a single AuthzPolicy entity.
type AuthzPolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthzPolicyMutation
}

// SetPolicyName sets the "policy_name" field.
func (apuo *AuthzPolicyUpdateOne) SetPolicyName(s string) *AuthzPolicyUpdateOne {
	apuo.mutation.SetPolicyName(s)
	return apuo
}

// SetObj sets the "obj" field.
func (apuo *AuthzPolicyUpdateOne) SetObj(s string) *AuthzPolicyUpdateOne {
	apuo.mutation.SetObj(s)
	return apuo
}

// SetPolicy sets the "policy" field.
func (apuo *AuthzPolicyUpdateOne) SetPolicy(s string) *AuthzPolicyUpdateOne {
	apuo.mutation.SetPolicy(s)
	return apuo
}

// SetNillablePolicy sets the "policy" field if the given value is not nil.
func (apuo *AuthzPolicyUpdateOne) SetNillablePolicy(s *string) *AuthzPolicyUpdateOne {
	if s != nil {
		apuo.SetPolicy(*s)
	}
	return apuo
}

// ClearPolicy clears the value of the "policy" field.
func (apuo *AuthzPolicyUpdateOne) ClearPolicy() *AuthzPolicyUpdateOne {
	apuo.mutation.ClearPolicy()
	return apuo
}

// SetStatus sets the "status" field.
func (apuo *AuthzPolicyUpdateOne) SetStatus(s string) *AuthzPolicyUpdateOne {
	apuo.mutation.SetStatus(s)
	return apuo
}

// SetUpdateTime sets the "update_time" field.
func (apuo *AuthzPolicyUpdateOne) SetUpdateTime(t time.Time) *AuthzPolicyUpdateOne {
	apuo.mutation.SetUpdateTime(t)
	return apuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (apuo *AuthzPolicyUpdateOne) SetNillableUpdateTime(t *time.Time) *AuthzPolicyUpdateOne {
	if t != nil {
		apuo.SetUpdateTime(*t)
	}
	return apuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (apuo *AuthzPolicyUpdateOne) ClearUpdateTime() *AuthzPolicyUpdateOne {
	apuo.mutation.ClearUpdateTime()
	return apuo
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (apuo *AuthzPolicyUpdateOne) SetCreateByID(id int) *AuthzPolicyUpdateOne {
	apuo.mutation.SetCreateByID(id)
	return apuo
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (apuo *AuthzPolicyUpdateOne) SetNillableCreateByID(id *int) *AuthzPolicyUpdateOne {
	if id != nil {
		apuo = apuo.SetCreateByID(*id)
	}
	return apuo
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (apuo *AuthzPolicyUpdateOne) SetCreateBy(u *User) *AuthzPolicyUpdateOne {
	return apuo.SetCreateByID(u.ID)
}

// Mutation returns the AuthzPolicyMutation object of the builder.
func (apuo *AuthzPolicyUpdateOne) Mutation() *AuthzPolicyMutation {
	return apuo.mutation
}

// ClearCreateBy clears the "create_by" edge to the User entity.
func (apuo *AuthzPolicyUpdateOne) ClearCreateBy() *AuthzPolicyUpdateOne {
	apuo.mutation.ClearCreateBy()
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AuthzPolicyUpdateOne) Select(field string, fields ...string) *AuthzPolicyUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AuthzPolicy entity.
func (apuo *AuthzPolicyUpdateOne) Save(ctx context.Context) (*AuthzPolicy, error) {
	var (
		err  error
		node *AuthzPolicy
	)
	if len(apuo.hooks) == 0 {
		if err = apuo.check(); err != nil {
			return nil, err
		}
		node, err = apuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthzPolicyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apuo.check(); err != nil {
				return nil, err
			}
			apuo.mutation = mutation
			node, err = apuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apuo.hooks) - 1; i >= 0; i-- {
			if apuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AuthzPolicyUpdateOne) SaveX(ctx context.Context) *AuthzPolicy {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AuthzPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AuthzPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apuo *AuthzPolicyUpdateOne) check() error {
	if v, ok := apuo.mutation.PolicyName(); ok {
		if err := authzpolicy.PolicyNameValidator(v); err != nil {
			return &ValidationError{Name: "policy_name", err: fmt.Errorf(`ent: validator failed for field "AuthzPolicy.policy_name": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.Obj(); ok {
		if err := authzpolicy.ObjValidator(v); err != nil {
			return &ValidationError{Name: "obj", err: fmt.Errorf(`ent: validator failed for field "AuthzPolicy.obj": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.Status(); ok {
		if err := authzpolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AuthzPolicy.status": %w`, err)}
		}
	}
	return nil
}

func (apuo *AuthzPolicyUpdateOne) sqlSave(ctx context.Context) (_node *AuthzPolicy, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authzpolicy.Table,
			Columns: authzpolicy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authzpolicy.FieldID,
			},
		},
	}
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthzPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authzpolicy.FieldID)
		for _, f := range fields {
			if !authzpolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authzpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.PolicyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldPolicyName,
		})
	}
	if value, ok := apuo.mutation.Obj(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldObj,
		})
	}
	if value, ok := apuo.mutation.Policy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldPolicy,
		})
	}
	if apuo.mutation.PolicyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: authzpolicy.FieldPolicy,
		})
	}
	if value, ok := apuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldStatus,
		})
	}
	if value, ok := apuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authzpolicy.FieldUpdateTime,
		})
	}
	if apuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: authzpolicy.FieldUpdateTime,
		})
	}
	if apuo.mutation.CreateByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authzpolicy.CreateByTable,
			Columns: []string{authzpolicy.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authzpolicy.CreateByTable,
			Columns: []string{authzpolicy.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthzPolicy{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authzpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
