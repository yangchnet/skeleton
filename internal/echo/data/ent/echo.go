// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yangchnet/skeleton/internal/echo/data/ent/echo"
)

// Echo is the model entity for the Echo schema.
type Echo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// EchoMessage holds the value of the "echo_message" field.
	EchoMessage string `json:"echo_message,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	DeleteTime *time.Time `json:"delete_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Echo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case echo.FieldDeleted:
			values[i] = new(sql.NullBool)
		case echo.FieldID:
			values[i] = new(sql.NullInt64)
		case echo.FieldMessage, echo.FieldEchoMessage:
			values[i] = new(sql.NullString)
		case echo.FieldCreateTime, echo.FieldUpdateTime, echo.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Echo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Echo fields.
func (e *Echo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case echo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case echo.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				e.Message = value.String
			}
		case echo.FieldEchoMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field echo_message", values[i])
			} else if value.Valid {
				e.EchoMessage = value.String
			}
		case echo.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				e.Deleted = value.Bool
			}
		case echo.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				e.CreateTime = value.Time
			}
		case echo.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				e.UpdateTime = new(time.Time)
				*e.UpdateTime = value.Time
			}
		case echo.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				e.DeleteTime = new(time.Time)
				*e.DeleteTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Echo.
// Note that you need to call Echo.Unwrap() before calling this method if this Echo
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Echo) Update() *EchoUpdateOne {
	return (&EchoClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Echo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Echo) Unwrap() *Echo {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Echo is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Echo) String() string {
	var builder strings.Builder
	builder.WriteString("Echo(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", message=")
	builder.WriteString(e.Message)
	builder.WriteString(", echo_message=")
	builder.WriteString(e.EchoMessage)
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", e.Deleted))
	builder.WriteString(", create_time=")
	builder.WriteString(e.CreateTime.Format(time.ANSIC))
	if v := e.UpdateTime; v != nil {
		builder.WriteString(", update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := e.DeleteTime; v != nil {
		builder.WriteString(", delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Echos is a parsable slice of Echo.
type Echos []*Echo

func (e Echos) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
