// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/tenant"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// TenantName holds the value of the "tenant_name" field.
	TenantName *string `json:"tenant_name,omitempty"`
	// Passwd holds the value of the "passwd" field.
	Passwd string `json:"passwd,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone *string `json:"phone,omitempty"`
	// Email holds the value of the "email" field.
	Email *string `json:"email,omitempty"`
	// Status holds the value of the "status" field.
	// active or disable or delete
	Status string `json:"status,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	tenant_users *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Policys holds the value of the policys edge.
	Policys []*AuthzPolicy `json:"policys,omitempty"`
	// Bindings holds the value of the bindings edge.
	Bindings []*BindUserRole `json:"bindings,omitempty"`
	// Belong holds the value of the belong edge.
	Belong *Tenant `json:"belong,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PolicysOrErr returns the Policys value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PolicysOrErr() ([]*AuthzPolicy, error) {
	if e.loadedTypes[0] {
		return e.Policys, nil
	}
	return nil, &NotLoadedError{edge: "policys"}
}

// BindingsOrErr returns the Bindings value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BindingsOrErr() ([]*BindUserRole, error) {
	if e.loadedTypes[1] {
		return e.Bindings, nil
	}
	return nil, &NotLoadedError{edge: "bindings"}
}

// BelongOrErr returns the Belong value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) BelongOrErr() (*Tenant, error) {
	if e.loadedTypes[2] {
		if e.Belong == nil {
			// The edge belong was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Belong, nil
	}
	return nil, &NotLoadedError{edge: "belong"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldTenantName, user.FieldPasswd, user.FieldPhone, user.FieldEmail, user.FieldStatus:
			values[i] = new(sql.NullString)
		case user.FieldCreateTime, user.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // tenant_users
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_name", values[i])
			} else if value.Valid {
				u.TenantName = new(string)
				*u.TenantName = value.String
			}
		case user.FieldPasswd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passwd", values[i])
			} else if value.Valid {
				u.Passwd = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = new(string)
				*u.Phone = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = new(string)
				*u.Email = value.String
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = value.String
			}
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				u.CreateTime = value.Time
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				u.UpdateTime = new(time.Time)
				*u.UpdateTime = value.Time
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field tenant_users", value)
			} else if value.Valid {
				u.tenant_users = new(int)
				*u.tenant_users = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPolicys queries the "policys" edge of the User entity.
func (u *User) QueryPolicys() *AuthzPolicyQuery {
	return (&UserClient{config: u.config}).QueryPolicys(u)
}

// QueryBindings queries the "bindings" edge of the User entity.
func (u *User) QueryBindings() *BindUserRoleQuery {
	return (&UserClient{config: u.config}).QueryBindings(u)
}

// QueryBelong queries the "belong" edge of the User entity.
func (u *User) QueryBelong() *TenantQuery {
	return (&UserClient{config: u.config}).QueryBelong(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	if v := u.TenantName; v != nil {
		builder.WriteString(", tenant_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", passwd=")
	builder.WriteString(u.Passwd)
	if v := u.Phone; v != nil {
		builder.WriteString(", phone=")
		builder.WriteString(*v)
	}
	if v := u.Email; v != nil {
		builder.WriteString(", email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", status=")
	builder.WriteString(u.Status)
	builder.WriteString(", create_time=")
	builder.WriteString(u.CreateTime.Format(time.ANSIC))
	if v := u.UpdateTime; v != nil {
		builder.WriteString(", update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
