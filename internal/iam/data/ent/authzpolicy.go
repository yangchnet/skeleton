// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/authzpolicy"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/user"
)

// AuthzPolicy is the model entity for the AuthzPolicy schema.
type AuthzPolicy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PolicyName holds the value of the "policy_name" field.
	PolicyName string `json:"policy_name,omitempty"`
	// Obj holds the value of the "obj" field.
	Obj string `json:"obj,omitempty"`
	// Policy holds the value of the "policy" field.
	Policy *string `json:"policy,omitempty"`
	// Status holds the value of the "status" field.
	// active or disable or delete
	Status string `json:"status,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthzPolicyQuery when eager-loading is set.
	Edges        AuthzPolicyEdges `json:"edges"`
	user_policys *int
}

// AuthzPolicyEdges holds the relations/edges for other nodes in the graph.
type AuthzPolicyEdges struct {
	// CreateBy holds the value of the create_by edge.
	CreateBy *User `json:"create_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CreateByOrErr returns the CreateBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthzPolicyEdges) CreateByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CreateBy == nil {
			// The edge create_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreateBy, nil
	}
	return nil, &NotLoadedError{edge: "create_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthzPolicy) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case authzpolicy.FieldID:
			values[i] = new(sql.NullInt64)
		case authzpolicy.FieldPolicyName, authzpolicy.FieldObj, authzpolicy.FieldPolicy, authzpolicy.FieldStatus:
			values[i] = new(sql.NullString)
		case authzpolicy.FieldCreateTime, authzpolicy.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case authzpolicy.ForeignKeys[0]: // user_policys
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuthzPolicy", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthzPolicy fields.
func (ap *AuthzPolicy) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authzpolicy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = int(value.Int64)
		case authzpolicy.FieldPolicyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field policy_name", values[i])
			} else if value.Valid {
				ap.PolicyName = value.String
			}
		case authzpolicy.FieldObj:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field obj", values[i])
			} else if value.Valid {
				ap.Obj = value.String
			}
		case authzpolicy.FieldPolicy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field policy", values[i])
			} else if value.Valid {
				ap.Policy = new(string)
				*ap.Policy = value.String
			}
		case authzpolicy.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ap.Status = value.String
			}
		case authzpolicy.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ap.CreateTime = value.Time
			}
		case authzpolicy.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ap.UpdateTime = new(time.Time)
				*ap.UpdateTime = value.Time
			}
		case authzpolicy.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_policys", value)
			} else if value.Valid {
				ap.user_policys = new(int)
				*ap.user_policys = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCreateBy queries the "create_by" edge of the AuthzPolicy entity.
func (ap *AuthzPolicy) QueryCreateBy() *UserQuery {
	return (&AuthzPolicyClient{config: ap.config}).QueryCreateBy(ap)
}

// Update returns a builder for updating this AuthzPolicy.
// Note that you need to call AuthzPolicy.Unwrap() before calling this method if this AuthzPolicy
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AuthzPolicy) Update() *AuthzPolicyUpdateOne {
	return (&AuthzPolicyClient{config: ap.config}).UpdateOne(ap)
}

// Unwrap unwraps the AuthzPolicy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AuthzPolicy) Unwrap() *AuthzPolicy {
	tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthzPolicy is not a transactional entity")
	}
	ap.config.driver = tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AuthzPolicy) String() string {
	var builder strings.Builder
	builder.WriteString("AuthzPolicy(")
	builder.WriteString(fmt.Sprintf("id=%v", ap.ID))
	builder.WriteString(", policy_name=")
	builder.WriteString(ap.PolicyName)
	builder.WriteString(", obj=")
	builder.WriteString(ap.Obj)
	if v := ap.Policy; v != nil {
		builder.WriteString(", policy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", status=")
	builder.WriteString(ap.Status)
	builder.WriteString(", create_time=")
	builder.WriteString(ap.CreateTime.Format(time.ANSIC))
	if v := ap.UpdateTime; v != nil {
		builder.WriteString(", update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// AuthzPolicies is a parsable slice of AuthzPolicy.
type AuthzPolicies []*AuthzPolicy

func (ap AuthzPolicies) config(cfg config) {
	for _i := range ap {
		ap[_i].config = cfg
	}
}
