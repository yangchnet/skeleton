// Code generated by entc, DO NOT EDIT.

package authzpolicy

import (
	"time"
)

const (
	// Label holds the string label denoting the authzpolicy type in the database.
	Label = "authz_policy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPolicyName holds the string denoting the policy_name field in the database.
	FieldPolicyName = "policy_name"
	// FieldObj holds the string denoting the obj field in the database.
	FieldObj = "obj"
	// FieldPolicy holds the string denoting the policy field in the database.
	FieldPolicy = "policy"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeCreateBy holds the string denoting the create_by edge name in mutations.
	EdgeCreateBy = "create_by"
	// Table holds the table name of the authzpolicy in the database.
	Table = "authz_policies"
	// CreateByTable is the table that holds the create_by relation/edge.
	CreateByTable = "authz_policies"
	// CreateByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreateByInverseTable = "users"
	// CreateByColumn is the table column denoting the create_by relation/edge.
	CreateByColumn = "user_policys"
)

// Columns holds all SQL columns for authzpolicy fields.
var Columns = []string{
	FieldID,
	FieldPolicyName,
	FieldObj,
	FieldPolicy,
	FieldStatus,
	FieldCreateTime,
	FieldUpdateTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "authz_policies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_policys",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PolicyNameValidator is a validator for the "policy_name" field. It is called by the builders before save.
	PolicyNameValidator func(string) error
	// ObjValidator is a validator for the "obj" field. It is called by the builders before save.
	ObjValidator func(string) error
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)
