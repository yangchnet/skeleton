// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/binduserrole"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/role"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/user"
)

// BindUserRole is the model entity for the BindUserRole schema.
type BindUserRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Rolename holds the value of the "rolename" field.
	Rolename string `json:"rolename,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BindUserRoleQuery when eager-loading is set.
	Edges         BindUserRoleEdges `json:"edges"`
	role_bindings *int
	user_bindings *int
}

// BindUserRoleEdges holds the relations/edges for other nodes in the graph.
type BindUserRoleEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BindUserRoleEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BindUserRoleEdges) RoleOrErr() (*Role, error) {
	if e.loadedTypes[1] {
		if e.Role == nil {
			// The edge role was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: role.Label}
		}
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BindUserRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case binduserrole.FieldID:
			values[i] = new(sql.NullInt64)
		case binduserrole.FieldUsername, binduserrole.FieldRolename:
			values[i] = new(sql.NullString)
		case binduserrole.FieldCreateTime, binduserrole.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case binduserrole.ForeignKeys[0]: // role_bindings
			values[i] = new(sql.NullInt64)
		case binduserrole.ForeignKeys[1]: // user_bindings
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BindUserRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BindUserRole fields.
func (bur *BindUserRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case binduserrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bur.ID = int(value.Int64)
		case binduserrole.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				bur.Username = value.String
			}
		case binduserrole.FieldRolename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rolename", values[i])
			} else if value.Valid {
				bur.Rolename = value.String
			}
		case binduserrole.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				bur.CreateTime = value.Time
			}
		case binduserrole.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				bur.UpdateTime = new(time.Time)
				*bur.UpdateTime = value.Time
			}
		case binduserrole.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field role_bindings", value)
			} else if value.Valid {
				bur.role_bindings = new(int)
				*bur.role_bindings = int(value.Int64)
			}
		case binduserrole.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_bindings", value)
			} else if value.Valid {
				bur.user_bindings = new(int)
				*bur.user_bindings = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the BindUserRole entity.
func (bur *BindUserRole) QueryUser() *UserQuery {
	return (&BindUserRoleClient{config: bur.config}).QueryUser(bur)
}

// QueryRole queries the "role" edge of the BindUserRole entity.
func (bur *BindUserRole) QueryRole() *RoleQuery {
	return (&BindUserRoleClient{config: bur.config}).QueryRole(bur)
}

// Update returns a builder for updating this BindUserRole.
// Note that you need to call BindUserRole.Unwrap() before calling this method if this BindUserRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (bur *BindUserRole) Update() *BindUserRoleUpdateOne {
	return (&BindUserRoleClient{config: bur.config}).UpdateOne(bur)
}

// Unwrap unwraps the BindUserRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bur *BindUserRole) Unwrap() *BindUserRole {
	tx, ok := bur.config.driver.(*txDriver)
	if !ok {
		panic("ent: BindUserRole is not a transactional entity")
	}
	bur.config.driver = tx.drv
	return bur
}

// String implements the fmt.Stringer.
func (bur *BindUserRole) String() string {
	var builder strings.Builder
	builder.WriteString("BindUserRole(")
	builder.WriteString(fmt.Sprintf("id=%v", bur.ID))
	builder.WriteString(", username=")
	builder.WriteString(bur.Username)
	builder.WriteString(", rolename=")
	builder.WriteString(bur.Rolename)
	builder.WriteString(", create_time=")
	builder.WriteString(bur.CreateTime.Format(time.ANSIC))
	if v := bur.UpdateTime; v != nil {
		builder.WriteString(", update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BindUserRoles is a parsable slice of BindUserRole.
type BindUserRoles []*BindUserRole

func (bur BindUserRoles) config(cfg config) {
	for _i := range bur {
		bur[_i].config = cfg
	}
}
