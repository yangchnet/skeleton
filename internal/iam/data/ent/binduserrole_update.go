// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/binduserrole"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/predicate"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/role"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/user"
)

// BindUserRoleUpdate is the builder for updating BindUserRole entities.
type BindUserRoleUpdate struct {
	config
	hooks    []Hook
	mutation *BindUserRoleMutation
}

// Where appends a list predicates to the BindUserRoleUpdate builder.
func (buru *BindUserRoleUpdate) Where(ps ...predicate.BindUserRole) *BindUserRoleUpdate {
	buru.mutation.Where(ps...)
	return buru
}

// SetUsername sets the "username" field.
func (buru *BindUserRoleUpdate) SetUsername(s string) *BindUserRoleUpdate {
	buru.mutation.SetUsername(s)
	return buru
}

// SetRolename sets the "rolename" field.
func (buru *BindUserRoleUpdate) SetRolename(s string) *BindUserRoleUpdate {
	buru.mutation.SetRolename(s)
	return buru
}

// SetUpdateTime sets the "update_time" field.
func (buru *BindUserRoleUpdate) SetUpdateTime(t time.Time) *BindUserRoleUpdate {
	buru.mutation.SetUpdateTime(t)
	return buru
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (buru *BindUserRoleUpdate) SetNillableUpdateTime(t *time.Time) *BindUserRoleUpdate {
	if t != nil {
		buru.SetUpdateTime(*t)
	}
	return buru
}

// ClearUpdateTime clears the value of the "update_time" field.
func (buru *BindUserRoleUpdate) ClearUpdateTime() *BindUserRoleUpdate {
	buru.mutation.ClearUpdateTime()
	return buru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buru *BindUserRoleUpdate) SetUserID(id int) *BindUserRoleUpdate {
	buru.mutation.SetUserID(id)
	return buru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (buru *BindUserRoleUpdate) SetNillableUserID(id *int) *BindUserRoleUpdate {
	if id != nil {
		buru = buru.SetUserID(*id)
	}
	return buru
}

// SetUser sets the "user" edge to the User entity.
func (buru *BindUserRoleUpdate) SetUser(u *User) *BindUserRoleUpdate {
	return buru.SetUserID(u.ID)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (buru *BindUserRoleUpdate) SetRoleID(id int) *BindUserRoleUpdate {
	buru.mutation.SetRoleID(id)
	return buru
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (buru *BindUserRoleUpdate) SetNillableRoleID(id *int) *BindUserRoleUpdate {
	if id != nil {
		buru = buru.SetRoleID(*id)
	}
	return buru
}

// SetRole sets the "role" edge to the Role entity.
func (buru *BindUserRoleUpdate) SetRole(r *Role) *BindUserRoleUpdate {
	return buru.SetRoleID(r.ID)
}

// Mutation returns the BindUserRoleMutation object of the builder.
func (buru *BindUserRoleUpdate) Mutation() *BindUserRoleMutation {
	return buru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buru *BindUserRoleUpdate) ClearUser() *BindUserRoleUpdate {
	buru.mutation.ClearUser()
	return buru
}

// ClearRole clears the "role" edge to the Role entity.
func (buru *BindUserRoleUpdate) ClearRole() *BindUserRoleUpdate {
	buru.mutation.ClearRole()
	return buru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (buru *BindUserRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(buru.hooks) == 0 {
		if err = buru.check(); err != nil {
			return 0, err
		}
		affected, err = buru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BindUserRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buru.check(); err != nil {
				return 0, err
			}
			buru.mutation = mutation
			affected, err = buru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(buru.hooks) - 1; i >= 0; i-- {
			if buru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (buru *BindUserRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := buru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (buru *BindUserRoleUpdate) Exec(ctx context.Context) error {
	_, err := buru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buru *BindUserRoleUpdate) ExecX(ctx context.Context) {
	if err := buru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buru *BindUserRoleUpdate) check() error {
	if v, ok := buru.mutation.Username(); ok {
		if err := binduserrole.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "BindUserRole.username": %w`, err)}
		}
	}
	if v, ok := buru.mutation.Rolename(); ok {
		if err := binduserrole.RolenameValidator(v); err != nil {
			return &ValidationError{Name: "rolename", err: fmt.Errorf(`ent: validator failed for field "BindUserRole.rolename": %w`, err)}
		}
	}
	return nil
}

func (buru *BindUserRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   binduserrole.Table,
			Columns: binduserrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: binduserrole.FieldID,
			},
		},
	}
	if ps := buru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buru.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binduserrole.FieldUsername,
		})
	}
	if value, ok := buru.mutation.Rolename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binduserrole.FieldRolename,
		})
	}
	if value, ok := buru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: binduserrole.FieldUpdateTime,
		})
	}
	if buru.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: binduserrole.FieldUpdateTime,
		})
	}
	if buru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binduserrole.UserTable,
			Columns: []string{binduserrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binduserrole.UserTable,
			Columns: []string{binduserrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buru.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binduserrole.RoleTable,
			Columns: []string{binduserrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buru.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binduserrole.RoleTable,
			Columns: []string{binduserrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, buru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{binduserrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BindUserRoleUpdateOne is the builder for updating a single BindUserRole entity.
type BindUserRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BindUserRoleMutation
}

// SetUsername sets the "username" field.
func (buruo *BindUserRoleUpdateOne) SetUsername(s string) *BindUserRoleUpdateOne {
	buruo.mutation.SetUsername(s)
	return buruo
}

// SetRolename sets the "rolename" field.
func (buruo *BindUserRoleUpdateOne) SetRolename(s string) *BindUserRoleUpdateOne {
	buruo.mutation.SetRolename(s)
	return buruo
}

// SetUpdateTime sets the "update_time" field.
func (buruo *BindUserRoleUpdateOne) SetUpdateTime(t time.Time) *BindUserRoleUpdateOne {
	buruo.mutation.SetUpdateTime(t)
	return buruo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (buruo *BindUserRoleUpdateOne) SetNillableUpdateTime(t *time.Time) *BindUserRoleUpdateOne {
	if t != nil {
		buruo.SetUpdateTime(*t)
	}
	return buruo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (buruo *BindUserRoleUpdateOne) ClearUpdateTime() *BindUserRoleUpdateOne {
	buruo.mutation.ClearUpdateTime()
	return buruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buruo *BindUserRoleUpdateOne) SetUserID(id int) *BindUserRoleUpdateOne {
	buruo.mutation.SetUserID(id)
	return buruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (buruo *BindUserRoleUpdateOne) SetNillableUserID(id *int) *BindUserRoleUpdateOne {
	if id != nil {
		buruo = buruo.SetUserID(*id)
	}
	return buruo
}

// SetUser sets the "user" edge to the User entity.
func (buruo *BindUserRoleUpdateOne) SetUser(u *User) *BindUserRoleUpdateOne {
	return buruo.SetUserID(u.ID)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (buruo *BindUserRoleUpdateOne) SetRoleID(id int) *BindUserRoleUpdateOne {
	buruo.mutation.SetRoleID(id)
	return buruo
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (buruo *BindUserRoleUpdateOne) SetNillableRoleID(id *int) *BindUserRoleUpdateOne {
	if id != nil {
		buruo = buruo.SetRoleID(*id)
	}
	return buruo
}

// SetRole sets the "role" edge to the Role entity.
func (buruo *BindUserRoleUpdateOne) SetRole(r *Role) *BindUserRoleUpdateOne {
	return buruo.SetRoleID(r.ID)
}

// Mutation returns the BindUserRoleMutation object of the builder.
func (buruo *BindUserRoleUpdateOne) Mutation() *BindUserRoleMutation {
	return buruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buruo *BindUserRoleUpdateOne) ClearUser() *BindUserRoleUpdateOne {
	buruo.mutation.ClearUser()
	return buruo
}

// ClearRole clears the "role" edge to the Role entity.
func (buruo *BindUserRoleUpdateOne) ClearRole() *BindUserRoleUpdateOne {
	buruo.mutation.ClearRole()
	return buruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buruo *BindUserRoleUpdateOne) Select(field string, fields ...string) *BindUserRoleUpdateOne {
	buruo.fields = append([]string{field}, fields...)
	return buruo
}

// Save executes the query and returns the updated BindUserRole entity.
func (buruo *BindUserRoleUpdateOne) Save(ctx context.Context) (*BindUserRole, error) {
	var (
		err  error
		node *BindUserRole
	)
	if len(buruo.hooks) == 0 {
		if err = buruo.check(); err != nil {
			return nil, err
		}
		node, err = buruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BindUserRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buruo.check(); err != nil {
				return nil, err
			}
			buruo.mutation = mutation
			node, err = buruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buruo.hooks) - 1; i >= 0; i-- {
			if buruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buruo *BindUserRoleUpdateOne) SaveX(ctx context.Context) *BindUserRole {
	node, err := buruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buruo *BindUserRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := buruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buruo *BindUserRoleUpdateOne) ExecX(ctx context.Context) {
	if err := buruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buruo *BindUserRoleUpdateOne) check() error {
	if v, ok := buruo.mutation.Username(); ok {
		if err := binduserrole.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "BindUserRole.username": %w`, err)}
		}
	}
	if v, ok := buruo.mutation.Rolename(); ok {
		if err := binduserrole.RolenameValidator(v); err != nil {
			return &ValidationError{Name: "rolename", err: fmt.Errorf(`ent: validator failed for field "BindUserRole.rolename": %w`, err)}
		}
	}
	return nil
}

func (buruo *BindUserRoleUpdateOne) sqlSave(ctx context.Context) (_node *BindUserRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   binduserrole.Table,
			Columns: binduserrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: binduserrole.FieldID,
			},
		},
	}
	id, ok := buruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BindUserRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, binduserrole.FieldID)
		for _, f := range fields {
			if !binduserrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != binduserrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buruo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binduserrole.FieldUsername,
		})
	}
	if value, ok := buruo.mutation.Rolename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: binduserrole.FieldRolename,
		})
	}
	if value, ok := buruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: binduserrole.FieldUpdateTime,
		})
	}
	if buruo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: binduserrole.FieldUpdateTime,
		})
	}
	if buruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binduserrole.UserTable,
			Columns: []string{binduserrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binduserrole.UserTable,
			Columns: []string{binduserrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buruo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binduserrole.RoleTable,
			Columns: []string{binduserrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buruo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   binduserrole.RoleTable,
			Columns: []string{binduserrole.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BindUserRole{config: buruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{binduserrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
