// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/authzpolicy"
	"github.com/yangchnet/skeleton/internal/iam/data/ent/user"
)

// AuthzPolicyCreate is the builder for creating a AuthzPolicy entity.
type AuthzPolicyCreate struct {
	config
	mutation *AuthzPolicyMutation
	hooks    []Hook
}

// SetPolicyName sets the "policy_name" field.
func (apc *AuthzPolicyCreate) SetPolicyName(s string) *AuthzPolicyCreate {
	apc.mutation.SetPolicyName(s)
	return apc
}

// SetObj sets the "obj" field.
func (apc *AuthzPolicyCreate) SetObj(s string) *AuthzPolicyCreate {
	apc.mutation.SetObj(s)
	return apc
}

// SetPolicy sets the "policy" field.
func (apc *AuthzPolicyCreate) SetPolicy(s string) *AuthzPolicyCreate {
	apc.mutation.SetPolicy(s)
	return apc
}

// SetNillablePolicy sets the "policy" field if the given value is not nil.
func (apc *AuthzPolicyCreate) SetNillablePolicy(s *string) *AuthzPolicyCreate {
	if s != nil {
		apc.SetPolicy(*s)
	}
	return apc
}

// SetStatus sets the "status" field.
func (apc *AuthzPolicyCreate) SetStatus(s string) *AuthzPolicyCreate {
	apc.mutation.SetStatus(s)
	return apc
}

// SetCreateTime sets the "create_time" field.
func (apc *AuthzPolicyCreate) SetCreateTime(t time.Time) *AuthzPolicyCreate {
	apc.mutation.SetCreateTime(t)
	return apc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (apc *AuthzPolicyCreate) SetNillableCreateTime(t *time.Time) *AuthzPolicyCreate {
	if t != nil {
		apc.SetCreateTime(*t)
	}
	return apc
}

// SetUpdateTime sets the "update_time" field.
func (apc *AuthzPolicyCreate) SetUpdateTime(t time.Time) *AuthzPolicyCreate {
	apc.mutation.SetUpdateTime(t)
	return apc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (apc *AuthzPolicyCreate) SetNillableUpdateTime(t *time.Time) *AuthzPolicyCreate {
	if t != nil {
		apc.SetUpdateTime(*t)
	}
	return apc
}

// SetCreateByID sets the "create_by" edge to the User entity by ID.
func (apc *AuthzPolicyCreate) SetCreateByID(id int) *AuthzPolicyCreate {
	apc.mutation.SetCreateByID(id)
	return apc
}

// SetNillableCreateByID sets the "create_by" edge to the User entity by ID if the given value is not nil.
func (apc *AuthzPolicyCreate) SetNillableCreateByID(id *int) *AuthzPolicyCreate {
	if id != nil {
		apc = apc.SetCreateByID(*id)
	}
	return apc
}

// SetCreateBy sets the "create_by" edge to the User entity.
func (apc *AuthzPolicyCreate) SetCreateBy(u *User) *AuthzPolicyCreate {
	return apc.SetCreateByID(u.ID)
}

// Mutation returns the AuthzPolicyMutation object of the builder.
func (apc *AuthzPolicyCreate) Mutation() *AuthzPolicyMutation {
	return apc.mutation
}

// Save creates the AuthzPolicy in the database.
func (apc *AuthzPolicyCreate) Save(ctx context.Context) (*AuthzPolicy, error) {
	var (
		err  error
		node *AuthzPolicy
	)
	apc.defaults()
	if len(apc.hooks) == 0 {
		if err = apc.check(); err != nil {
			return nil, err
		}
		node, err = apc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthzPolicyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apc.check(); err != nil {
				return nil, err
			}
			apc.mutation = mutation
			if node, err = apc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(apc.hooks) - 1; i >= 0; i-- {
			if apc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AuthzPolicyCreate) SaveX(ctx context.Context) *AuthzPolicy {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AuthzPolicyCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AuthzPolicyCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *AuthzPolicyCreate) defaults() {
	if _, ok := apc.mutation.CreateTime(); !ok {
		v := authzpolicy.DefaultCreateTime()
		apc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AuthzPolicyCreate) check() error {
	if _, ok := apc.mutation.PolicyName(); !ok {
		return &ValidationError{Name: "policy_name", err: errors.New(`ent: missing required field "AuthzPolicy.policy_name"`)}
	}
	if v, ok := apc.mutation.PolicyName(); ok {
		if err := authzpolicy.PolicyNameValidator(v); err != nil {
			return &ValidationError{Name: "policy_name", err: fmt.Errorf(`ent: validator failed for field "AuthzPolicy.policy_name": %w`, err)}
		}
	}
	if _, ok := apc.mutation.Obj(); !ok {
		return &ValidationError{Name: "obj", err: errors.New(`ent: missing required field "AuthzPolicy.obj"`)}
	}
	if v, ok := apc.mutation.Obj(); ok {
		if err := authzpolicy.ObjValidator(v); err != nil {
			return &ValidationError{Name: "obj", err: fmt.Errorf(`ent: validator failed for field "AuthzPolicy.obj": %w`, err)}
		}
	}
	if _, ok := apc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "AuthzPolicy.status"`)}
	}
	if v, ok := apc.mutation.Status(); ok {
		if err := authzpolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AuthzPolicy.status": %w`, err)}
		}
	}
	if _, ok := apc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "AuthzPolicy.create_time"`)}
	}
	return nil
}

func (apc *AuthzPolicyCreate) sqlSave(ctx context.Context) (*AuthzPolicy, error) {
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (apc *AuthzPolicyCreate) createSpec() (*AuthzPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthzPolicy{config: apc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authzpolicy.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authzpolicy.FieldID,
			},
		}
	)
	if value, ok := apc.mutation.PolicyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldPolicyName,
		})
		_node.PolicyName = value
	}
	if value, ok := apc.mutation.Obj(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldObj,
		})
		_node.Obj = value
	}
	if value, ok := apc.mutation.Policy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldPolicy,
		})
		_node.Policy = &value
	}
	if value, ok := apc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authzpolicy.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := apc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authzpolicy.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := apc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authzpolicy.FieldUpdateTime,
		})
		_node.UpdateTime = &value
	}
	if nodes := apc.mutation.CreateByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authzpolicy.CreateByTable,
			Columns: []string{authzpolicy.CreateByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_policys = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthzPolicyCreateBulk is the builder for creating many AuthzPolicy entities in bulk.
type AuthzPolicyCreateBulk struct {
	config
	builders []*AuthzPolicyCreate
}

// Save creates the AuthzPolicy entities in the database.
func (apcb *AuthzPolicyCreateBulk) Save(ctx context.Context) ([]*AuthzPolicy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AuthzPolicy, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthzPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AuthzPolicyCreateBulk) SaveX(ctx context.Context) []*AuthzPolicy {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AuthzPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AuthzPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}
