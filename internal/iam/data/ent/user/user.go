// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldTenantName holds the string denoting the tenant_name field in the database.
	FieldTenantName = "tenant_name"
	// FieldPasswd holds the string denoting the passwd field in the database.
	FieldPasswd = "passwd"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgePolicys holds the string denoting the policys edge name in mutations.
	EdgePolicys = "policys"
	// EdgeBindings holds the string denoting the bindings edge name in mutations.
	EdgeBindings = "bindings"
	// EdgeBelong holds the string denoting the belong edge name in mutations.
	EdgeBelong = "belong"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PolicysTable is the table that holds the policys relation/edge.
	PolicysTable = "authz_policies"
	// PolicysInverseTable is the table name for the AuthzPolicy entity.
	// It exists in this package in order to avoid circular dependency with the "authzpolicy" package.
	PolicysInverseTable = "authz_policies"
	// PolicysColumn is the table column denoting the policys relation/edge.
	PolicysColumn = "user_policys"
	// BindingsTable is the table that holds the bindings relation/edge.
	BindingsTable = "bind_user_roles"
	// BindingsInverseTable is the table name for the BindUserRole entity.
	// It exists in this package in order to avoid circular dependency with the "binduserrole" package.
	BindingsInverseTable = "bind_user_roles"
	// BindingsColumn is the table column denoting the bindings relation/edge.
	BindingsColumn = "user_bindings"
	// BelongTable is the table that holds the belong relation/edge.
	BelongTable = "users"
	// BelongInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	BelongInverseTable = "tenants"
	// BelongColumn is the table column denoting the belong relation/edge.
	BelongColumn = "tenant_users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldTenantName,
	FieldPasswd,
	FieldPhone,
	FieldEmail,
	FieldStatus,
	FieldCreateTime,
	FieldUpdateTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"tenant_users",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PasswdValidator is a validator for the "passwd" field. It is called by the builders before save.
	PasswdValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)
