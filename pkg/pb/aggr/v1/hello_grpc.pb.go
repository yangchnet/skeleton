// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aggr/v1/hello.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloAggrClient is the client API for HelloAggr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloAggrClient interface {
	SayHelloAggr(ctx context.Context, in *SayHelloAggrRequest, opts ...grpc.CallOption) (*SayHelloAggrResponse, error)
}

type helloAggrClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloAggrClient(cc grpc.ClientConnInterface) HelloAggrClient {
	return &helloAggrClient{cc}
}

func (c *helloAggrClient) SayHelloAggr(ctx context.Context, in *SayHelloAggrRequest, opts ...grpc.CallOption) (*SayHelloAggrResponse, error) {
	out := new(SayHelloAggrResponse)
	err := c.cc.Invoke(ctx, "/aggr.HelloAggr/SayHelloAggr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloAggrServer is the server API for HelloAggr service.
// All implementations must embed UnimplementedHelloAggrServer
// for forward compatibility
type HelloAggrServer interface {
	SayHelloAggr(context.Context, *SayHelloAggrRequest) (*SayHelloAggrResponse, error)
	mustEmbedUnimplementedHelloAggrServer()
}

// UnimplementedHelloAggrServer must be embedded to have forward compatible implementations.
type UnimplementedHelloAggrServer struct {
}

func (UnimplementedHelloAggrServer) SayHelloAggr(context.Context, *SayHelloAggrRequest) (*SayHelloAggrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloAggr not implemented")
}
func (UnimplementedHelloAggrServer) mustEmbedUnimplementedHelloAggrServer() {}

// UnsafeHelloAggrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloAggrServer will
// result in compilation errors.
type UnsafeHelloAggrServer interface {
	mustEmbedUnimplementedHelloAggrServer()
}

func RegisterHelloAggrServer(s grpc.ServiceRegistrar, srv HelloAggrServer) {
	s.RegisterService(&HelloAggr_ServiceDesc, srv)
}

func _HelloAggr_SayHelloAggr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloAggrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloAggrServer).SayHelloAggr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggr.HelloAggr/SayHelloAggr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloAggrServer).SayHelloAggr(ctx, req.(*SayHelloAggrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloAggr_ServiceDesc is the grpc.ServiceDesc for HelloAggr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloAggr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggr.HelloAggr",
	HandlerType: (*HelloAggrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloAggr",
			Handler:    _HelloAggr_SayHelloAggr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggr/v1/hello.proto",
}
